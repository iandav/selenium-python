------- 01 drivers ------
>>> First, import main packages used in selenium:
from selenium import webdriver // Selenium driver
from selenium.webdriver.common.keys import Keys // Keyboard access
from selenium.webdriver.common.by import By // By class used to find elements
from selenium.webdriver.chrome.options import Options // Options class to change browser options and use them in executable_path
from selenium.webdriver.support.wait import WebDriverWait // WebDriverWait class to use explicit wait
from selenium.webdriver.support. import expected_conditions as EC // Expected conditions used with explicit 
from selenium.webdriver.support.ui import Select // Select class to use in dropdowns
from selenium.webdriver.common.alert import Alert // Alert class to use in alerts
from selenium.webdriver.common.action_chains import ActionChains // ActionChains class to use in mouse actions

>>> Create a driver object with the required browser:
driver = webdriver.Chrome(executable_path="")
----------------

------ 02 Basic webdriver commands ------
>>> .get() // Visits a webpage
>>> .find_element_by() // Get element by specific selector
>>> .find_element(By. ," ") // Get element by specific selector using By class
>>> .click() // Click an element
>>> .maximize_window() // Maximizes the browser window
>>> .close() // Closes one instance of the browser
>>> .quit() // Closes all the browsers and the driver

>>> .title // Return the title
>>> .current_url // Return the URL
>>> .page_source // Return the HTML
----------------

------ 03 Navigation commands ------
>>> .back() // Go to the previous page
>>> .forward() // Go to the next page
----------------

------ 04 Conditional commands ------
>>> .is_displayed() // Whether the element is visible by the user
>>> .is_enabled() // Whether the element is enabled
>>> .is_selected() // Used for Checkboxes and radio buttons
----------------

------ 05 Implicit & Explicit waits ------
>>> .implicitly_wait() // Sets a timeout to wait for elements to be found
                       // If elements are found before x seconds then passes
                       // If elements aren't found then it throws an exception
                       // Implicit wait solves synchronitation problem
>>> wait = WebdriverWait(driver, 10) // Create an object from WebdriverWait class, passing the driver as a parameter and a time.
                                     // Import webdriver wait + expected conditions as EC
element = wait.until(EC.x(element))  // Used in particular elements with EC, when the condition is TRUE next actions will be executed
----------------

------ 06 Input boxes ------
>>> Total number of input boxes in the webpage: len(elements found)
>>> Provide input text value: Using .find_element() and .send_keys()
>>> Check status: Using .is_displayed() or .is_enabled()
----------------

------ 07 Radio buttons & Check boxes ------
>>> 1) Verify whether the button is selected or not: Using .is_selected()
>>> 2) Click on selected button
----------------

------ 08 Dropdown menus ------
>>> Select an option: Import Select class, create an Select object with the element as argument, finally use methods.
>>> Total number of options: print(len(selectedElement.options))
>>> List all options: for i in options: print(i.text)
----------------

------ 09 Links ------
>>> Get all the links: Using .find_elements_by_tag_name("a")
>>> Total number of links: print(len(links))
>>> List all links: for i in links: print(i.text)
>>> Click a link: Using .find_element_by_link_text() or .find_element_by_partial_link_text() (specifying substring of the text)
----------------

------ 10 Alerts ------
>>> import alert class and use it with the driver as argument, finally use methods
>>> Use methods: .accept() or .dismiss()
----------------

------ 11 Frames ------
>>> Switch to a particular frame: .switch_to.frame()
>>> Go back to the main webpage: .switch_to.default_content()
----------------

------ 12 Browser Windows ------
>>> Return the value of the current window: .current_window_handle
>>> Return a list of values of all the current windows: .window_handles
>>> Switch windows: .switch_to.window()
>>> Close a window: .close()
>>> Close all windows: .quit()
----------------

------ 13 Web tables ------
>>> Print all rows/columns: Using xpath of the rows/columns with len() and using a for loop. Use "+str(x)+" inside xpath
>>> Use print(, end="   ") to print the results as a table in console
----------------

------ 14 Scrolling ------
>>> Scroll by pixel: .execute_script("window.scrollBy(x,y)","")
>>> Scroll until element found: .execute_script("arguments[0].scrollIntoView();",Element)
>>> Scroll to end of the page: .execute_script("window.scrollBy(0,document.body.scrollHeight)")
----------------

------ 15 Mouse actions ------
>>> Import ActionChains class: from selenium.webdriver.common.action_chains import ActionChains
>>> Mouse hover: Create an instance of ActionChains(driver), use .move_to_element() and finally .perform()
>>> Double click: Create an instance of ActionChains(driver), and use .double_click() and finally .perform()
>>> Right click: Create an instance of ActionChains(driver), and use .context_click() and finally .perform()
>>> Drag & Drop: Create an instance of ActionChains(driver), and use .drag_and_drop(a,b) and finally .perform()
----------------

------ 16 Upload files ------
>>> Get the browse file element and upload the file using .send_keys() with file path as argument
----------------

------ 17 Data Driven Testing ------
>>> Install and import openpyxl module using 'pip install openpyxl'
>>> Read data from Excel: workbook = openpyxl.load_workbook(filePath), sheet = workbook.active and sheet.cell(r,c).value
>>> Writing data in Excel: sheet.cell(r,c,value)
----------------

------ 18 Cookies ------
>>> Capture all cookies: .get_cookies()
>>> Adding a new cookie: cookie = {} finally driver.add_cookie(cookie)
>>> Deleting a cookie: .delete_cookie() using the name
>>> Deleting all cookies: .delete_all_cookies()
----------------

------ 19 Screenshots ------
>>> Capture the window: .save_screenshot() or .save_screenshot_as_file()
----------------

------ 20 Logs ------
>>> Log levels: DEBUG, INFO, WARNING, ERROR, CRITICAL
>>> Adding logging: import logging, logging.basicConfig(filename='x.log',format='%(asctime)s: %(levelname)s: %(message)s',level='START LEVEL')
>>> For real projects create logger object logger = logging.getLogger()
----------------

------ 21 Unittest framework ------

----------------

------ 22 Unittest keywords ------
>>> Executing code before each test cases: setUp(self)
>>> Executing code after each test cases: tearDown(self)
>>> Executing code before all test cases: setUpClass(self)
>>> Executing code after all test cases: tearDownClass(self)
>>> Executing code before each test module: setUpModule()
>>> Executing code after each test module: tearDownModule()
----------------

------ 23 Unittest skipping tests with decorators ------
>>> Skip test: @unittest.SkipTest
>>> Skip test with reason: @unittest.skip(reason)
>>> Skip test with condition: @unittest.skipIf(condition, reason)
----------------

------ 24 Unittest Assertions ------
>>> assertEqual(a,b) - If a matches b the unittest will continue the execution.
>>> assertNotEqual(a,b) - If a doesn't match the unittest will continue the execution.

>>> assertTrue(a) - If the expression is true
>>> assertFalse(a) - If the expression is false

>>> assertIsNone(a) - If contains None (null) value
>>> assertIsNotNone(a) - If contains a value different from None (null)

>>> assertIn(a,b) - If a is present in b
>>> assertNotIn(a,b) - If a isn't present in b

>>> assertGreater(a,b) , assertGreaterEqual(a,b)
>>> assertLess(a,b) , assertLessEqual(a,b)
----------------

------ 25 Unittest Create/Execute Test Cases and Test Suites ------
>>> Import TCases classes to one file, use tc1 = unittest.TestLoader.loadTestsFromTestCase() for each test case class
>>> Create Test Suite: firstTS = unittest.TestSuite.addTests([tc1,tc2])
>>> Run Tests: unittest.TextTestRunner.run(TS)
----------------





